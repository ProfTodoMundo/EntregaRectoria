update.packages(ask=FALSE)
install.packages('tm')
install.packages('textreuse')
install.packages('officer')
install.packages("textreuse")
library(devtools)
library(devtools)
install.packages('devtools')
install_github("ropensci/textreuse")
library(devtools)
install_github("ropensci/textreuse")
library(textreuse)
install_github("ropensci/textreuse")
library(devtools)
install_github("ropensci/textreuse")
install_github("ropensci/textreuse", force=TRUE)
library(tm)
library(devtools)
library(textreuse)
library(officer)
install.packages("tm")
install.packages("tm")
library(pdftools)
install.packages('pdftools')
install.packages('progress')
install.packages('ggplot2')
install.packages("readtext")
install.packages('textrank')
library(shiny)
library(pdftools)
library(textrank)
ui <- fluidPage(
titlePanel("Buscar frase en documentos PDF y DOCX"),
sidebarLayout(
sidebarPanel(
fileInput("files", "Arrastre y suelte los archivos aquí", multiple = TRUE),
selectInput("type", "Seleccione el tipo de archivo a buscar:", c("PDF", "DOCX"), selected = "PDF"),
textInput("phrase", "Frase a buscar"),
actionButton("search", "Buscar")
),
mainPanel(
verbatimTextOutput("results")
)
)
)
# Define el servidor de la aplicación Shiny
server <- function(input, output) {
# Función que busca la frase en los documentos PDF y DOCX
findPhrase <- function(files, phrase, type) {
if (type == "PDF") {
files <- files[grep(".pdf$", files)]
} else {
files <- files[grep(".docx$", files)]
}
results <- lapply(files, function(file) {
if (type == "PDF") {
text <- pdf_text(file)
} else {
text <- textrank::read_docx(file)
}
if (grepl(phrase, text)) {
file
} else {
NULL
}
})
results <- unlist(results)
results <- results[!is.null(results)]
if (length(results) == 0) {
"No se encontraron documentos que contengan la frase buscada."
} else {
results
}
}
# Evento que se activa cuando se presiona el botón "Buscar"
observeEvent(input$search, {
files <- input$files$datapath
phrase <- input$phrase
type <- input$type
results <- findPhrase(files, phrase, type)
output$results <- renderPrint({
results
})
})
}
# Crea la aplicación Shiny
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
if(!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
data("mat_gene")
head(mat_gene[, 1:5])
data("mat_gene")
data("mat_gbm")
library(ComplexHeatmap)
data("mat_gbm")
library(ComplexHeatmap)
data("mat_variant")
data("mat_sample")
data("mat_gbm")
setwd("~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto")
library(readr)
library(dplyr)
library(ggplot2)
library(venn)
setwd("~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto")
GenesEiMybs <- read_csv("GenesEiMybs.csv")
DataSet <- GenesEiMybs[,2:9]; #View(DataSet)
DataSet <- as.data.frame(DataSet)
DDataSet <- ifelse(DataSet!=0,1,0);
# << == >>  << == >>  << == >>  << == >>  << == >>  << == >>  << == >>
x <- as.data.frame(matrix(sample(0:1, 329, replace = TRUE), ncol = 7))
colnames(x) <- c("Trophozoites","en_8h",
"en_24h", "en_48h", "en_72h",
"ex_2h","ex_8h")
Set1 <- DDataSet[,2];  Set2 <- DDataSet[,3];
Set3 <- DDataSet[,4];  Set4 <- DDataSet[,5];
Set5 <- DDataSet[,6];  Set6 <- DDataSet[,7];
Set7 <- DDataSet[,8];
x$Trophozoites <- Set1
x$en_8h <- Set2
x$en_24h<- Set3
x$en_48h<- Set4
x$en_72h<- Set5
x$ex_2h<- Set6
x$ex_8h<- Set7
# with dashed lines
venn(x, ggplot = TRUE, linetype = "dashed",
size = 0.5,
ellipse = TRUE,
zcolor = c("red", "blue", "yellow", "green", "gray", "orange", "purple"),
col = c("red", "blue", "yellow", "green", "gray", "orange", "purple"))
venn_plot <- venn(x, ggplot = TRUE, linetype = "dashed",
size = 0.5,
ellipse = TRUE,
zcolor = c("red", "blue", "yellow", "green", "gray", "orange", "purple"),
col = c("red", "blue", "yellow", "green", "gray", "orange", "purple"))
venn_plot <- venn_plot+ggtitle("EiMybs Genns's Venn Diagram")
print(venn_plot)
setwd("~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto/Definitivos/Intersecciones")
directorio <- "~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto/Definitivos/Intersecciones"
archivos <- list.files(directorio)
palabra_buscada <- "Set1"
palabra_reemplazo <- "Trophozoite"
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
# Palabra a buscar y reemplazar
palabra_buscada <- "Set2"
palabra_reemplazo <- "en_8h"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
warning()
warnings()
# Palabra a buscar y reemplazar
palabra_buscada <- "Set3"
palabra_reemplazo <- "en_24h"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
warnings()
# Palabra a buscar y reemplazar
palabra_buscada <- "Set4"
palabra_reemplazo <- "en_48h"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
# Palabra a buscar y reemplazar
palabra_buscada <- "Set5"
palabra_reemplazo <- "en_72h"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
# Palabra a buscar y reemplazar
palabra_buscada <- "Set6"
palabra_reemplazo <- "ex_2h"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
# Palabra a buscar y reemplazar
palabra_buscada <- "Set7"
palabra_reemplazo <- "ex_8h"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
# Palabra a buscar y reemplazar
palabra_buscada <- "_Set7"
palabra_reemplazo <- "_ex_8h"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
# Palabra a buscar y reemplazar
palabra_buscada <- "_Set2"
palabra_reemplazo <- "en_8h"
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
palabra_buscada <- "_Set2_Set3"
palabra_reemplazo <- "_en_8h_en_24h"
directorio <- "~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto/Definitivos/Intersecciones"
palabra_buscada <- "_Set2_Set3"
palabra_reemplazo <- "_en_8h_en_24h"
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
palabra_buscada <- "Intersection_Trophozoite_Set2_Set3"
palabra_reemplazo <- "Intersection_Trophozoite_en_8h_en_24h"
palabra_buscada <- "Intersection_Trophozoite_Set2_Set3"
palabra_reemplazo <- "Intersection_Trophozoite_en_8h_en_24h"
directorio <- "~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto/Definitivos/Intersecciones"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
warnings()
directorio <- "~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto/Definitivos/Intersecciones"
# Obtener la lista de archivos en la carpeta
archivos <- list.files(directorio)
archivos
# Palabra a buscar y reemplazar
palabra_buscada <- "_Set1_"
palabra_reemplazo <- "_Trophozoite_"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
# Palabra a buscar y reemplazar
palabra_buscada <- "_Set2_"
palabra_reemplazo <- "_en_8h_"
directorio <- "~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto/Definitivos/Intersecciones"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
palabra_buscada <- "_Set3_"
palabra_reemplazo <- "_en_24h_"
directorio <- "~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto/Definitivos/Intersecciones"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
# Palabra a buscar y reemplazar
palabra_buscada <- "_Set4_"
palabra_reemplazo <- "_en_48h_"
directorio <- "~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto/Definitivos/Intersecciones"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
warnings
warnings()
source("~/Downloads/CursoProba/TareasAhtziri/MiRegresion.R")
shiny::runApp('Downloads/CursoProba/TareasAhtziri')
runApp('Downloads/CursoProba/TareasBrayan')
runApp('Downloads/CursoProba/TareasNestor/app_nestF.R')
source("~/Downloads/CursoProba/TareasMaria/MiRegresion.R")
install.packages(latex2exp)
source("~/Downloads/CursoProba/TareasMarisol/MiRegresion.R")
shiny::runApp('Downloads/CursoProba/TareasMarisol')
install.packages('BiocManager')
BiocManager::install('RockefellerUniversity/Bioconductor_Introduction',subdir='BioconductorIntroduction')
save.image("~/Sin título.RData")
install.packages("index")
install_github("dagdata","genomicsclass")
devtools::install_github("dagdata/genomicsclass")
library(devtools)
devtools::install_github("dagdata/genomicsclass")
devtools::install_github("https://github.com/dagdata/genomicsclass")
devtools::install_github("genomicsclass/GSE5859")
library(GenomicAlignments)
BiocManager::install('Rsamtools')
BiocManager::install('vsn')
BiocManager::install('org.Hs.eg.db')
BiocManager::install('sva')
library(parathyroidSE)
BiocManager::install(c("genefilter","geneplotter"))
knitr::opts_chunk$set(echo = TRUE)
summary(misdatos$LICENCIATURA)
load("Wkspaces/WkspcGral15.RData")
summary(misdatos$LICENCIATURA)
cont <- as.data.frame(table(bddCLCCyT$ACADEMIA,bddCLCCyT$CICLO,bddCLCCyT$TUTORXS)); #head(cont)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(xtable)
#setwd("~/Documents/GitHub/LicCienciaDatosbis")
setwd("~/Desktop/MiGithub/LicCienciaDatos")
load("Wkspaces/WkspcGral15.RData")
summary(misdatos$GENERO)
summary(misdatos$PLANTEL)
summary(misdatos$LICENCIATURA)
summary(misdatos$TURNO)
summary(misdatos$SIT_EST)
summary(misdatos$SITUACION)
summary(misdatos$MATERIA)
summary(misdatos$ACADEMIA)
summary(misdatos$COLEGIO)
summary(misdatos$CICLO)
summary(misdatos$SIT_INSC)
summary(misdatos$TURNO_CURSO)
summary(misdatos$GENERACION)
bddActivos <- misdatos%>% filter(misdatos$SIT_INSC=="INSCRITO" | misdatos$SIT_INSC == "OYENTE" )
#View(misdatos)
#head(bddActivos)
BDDCL <- bddActivos%>% filter(bddActivos$PLANTEL == "IZT")
#head(BDDCL)
summary(BDDCL$GENERO)
summary(BDDCL$PLANTEL)
summary(BDDCL$LICENCIATURA)
summary(BDDCL$TURNO)
summary(BDDCL$SIT_EST)
summary(BDDCL$SITUACION)
summary(BDDCL$MATERIA)
summary(BDDCL$ACADEMIA)
summary(BDDCL$COLEGIO)
summary(BDDCL$CICLO)
summary(BDDCL$SIT_INSC)
summary(BDDCL$TURNO_CURSO)
summary(BDDCL$GENERACION)
bddCLCCyT <- BDDCL%>% filter(BDDCL$COLEGIO=='CCYT')
cont <- as.data.frame(table(bddCLCCyT$ACADEMIA,bddCLCCyT$CICLO,bddCLCCyT$TURNO_CURSO)); #head(cont)
colnames(cont) <- c('Academia','Ciclo','Turno','Inscritos')
cont <- cont %>% arrange(desc(Inscritos))
porcentaje <- round(cont$Inscritos / sum(cont$Inscritos) * 100,2)
conta_sorted <- cbind(cont,porcentaje)
FilteredCont <- conta_sorted[conta_sorted$Inscritos!=0,]; #head(FilteredCont)
print(FilteredCont)
cont <- cont %>% arrange(desc(Academia))
porcentaje <- round(cont$Inscritos / sum(cont$Inscritos) * 100,2)
conta_sorted <- cbind(cont,porcentaje)
FilteredCont <- conta_sorted[conta_sorted$Inscritos!=0,]; #head(FilteredCont)
print(FilteredCont)
cont <- as.data.frame(table(bddCLCCyT$ACADEMIA,bddCLCCyT$CICLO,bddCLCCyT$TUTORXS)); #head(cont)
colnames(cont) <- c('Academia','Ciclo','Tutorxs','Inscritos')
cont <- cont %>% arrange(desc(Academia))
porcentaje <- round(cont$Inscritos / sum(cont$Inscritos) * 100,2)
conta_sorted <- cbind(cont,porcentaje)
FilteredCont <- conta_sorted[conta_sorted$Inscritos!=0,]; #head(FilteredCont)
print(FilteredCont)
cont <- as.data.frame(table(bddCLCCyT$TUTORXS,bddCLCCyT$ACADEMIA,bddCLCCyT$CICLO)); #head(cont)
colnames(cont) <- c('Tutorxs','Academia','Ciclo','Inscritos')
cont <- cont %>% arrange(desc(Tutorxs))
porcentaje <- round(cont$Inscritos / sum(cont$Inscritos) * 100,2)
conta_sorted <- cbind(cont,porcentaje)
FilteredCont <- conta_sorted[conta_sorted$Inscritos!=0,]; #head(FilteredCont)
print(FilteredCont)
View(misdatos)
setwd("~/Desktop/MiGithub/Resultados/docs")
setwd("~/Desktop/MiGithub/EntregaRectoria/docs")
